openapi: 3.0.1
info:
  title: 세종대 인터페이스 API 정보
  description: 세종대 인터페이스 API 정보
  version: 1.0.0
servers:
- url: https://api.interfacesejong.xyz
  description: Default Server URL
security:
- JWT: []
tags:
- name: Vote
  description: 투표 API
- name: Schedule
  description: 일정 관리 API
- name: Subscription
  description: Topic 구독 관리 api
- name: Board
  description: 게시글 API
paths:
  /api/votes/voter:
    get:
      tags:
      - Vote
      summary: 투표자 선택 조회
      description: 주제와 유저id로 투표 정보를 조회합니다.
      operationId: findVoterBySubjectIdAndUserId
      parameters:
      - name: subjectId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VoterDTO'
    put:
      tags:
      - Vote
      summary: 투표자 선택 수정
      description: 선택한 옵션을 다른 옵션으로 수정합니다.
      operationId: updateVoter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoterUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VoterDTO'
    post:
      tags:
      - Vote
      summary: 투표자 등록
      description: 투표자와 선택을 등록합니다.
      operationId: registerVote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoterDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VoterDTO'
  /api/users/user/{id}/sejong-auth:
    put:
      tags:
      - User
      summary: 세종대 학생 정보 인증
      description: |-
        해당 id 유저의 세종대 학생 정보를 인증한다.

         인증 되는 항목은 이름, 학번, 학년, 전공, 재학여부이다.
      operationId: updateSejongStudentAuth
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SejongStudentAuthRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/users/user/{id}/phone-number:
    put:
      tags:
      - User
      summary: 전화번호 변경
      description: 해당 id 유저의 전화번호를 변경한다.
      operationId: updatePhoneNumber
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/users/user/{id}/password:
    put:
      tags:
      - User
      summary: 비밀번호 변경
      description: 해당 id 유저의 비밀번호를 변경한다.
      operationId: generateNewPassword
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNewPasswordRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/users/user/{id}/github-account:
    put:
      tags:
      - User
      summary: gitbub 아이디 변경
      description: 해당 id 유저의 github 아이디를 변경한다.
      operationId: updateGithubAccount
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/users/user/{id}/generation:
    put:
      tags:
      - User
      summary: ' 기수 변경'
      description: 해당 id 유저의 기수를 변경한다.
      operationId: updateGeneration
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/users/user/{id}/discord-account:
    put:
      tags:
      - User
      summary: dicord 아이디 변경
      description: 해당 id 유저의 discord 아이디를 변경한다.
      operationId: updateDiscordAccount
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/users/user/{id}/device-id:
    put:
      tags:
      - User
      summary: 기기정보 변경
      description: 해당 id 유저의 device 아이디를 변경한다. device 아이디는 UUID 형식이다.
      operationId: updateDeviceId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/boards/board/{id}:
    get:
      tags:
      - Board
      summary: 게시글 조회
      description: 글 id로 글을 조회합니다.
      operationId: findById_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardResponse'
    put:
      tags:
      - Board
      summary: 글 업데이트
      description: 해당 id의 게시글을 수정합니다.
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                boardRequest:
                  $ref: '#/components/schemas/BoardRequest'
                multipartFileList:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardResponse'
    delete:
      tags:
      - Board
      summary: 글 삭제
      description: 글 id로 게시글을 삭제합니다.
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardResponse'
  /api/votes:
    get:
      tags:
      - Vote
      summary: 투표 주제 전체 조회
      description: 모든 투표 주제를 조회합니다.
      operationId: findAllSubjects
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectResponse'
    post:
      tags:
      - Vote
      summary: 투표 주제 등록
      description: "투표 주제와 기한, 하위 선택지를 등록합니다."
      operationId: createVote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateResponse'
  /api/users:
    get:
      tags:
      - User
      summary: 전체 유저 조회
      description: 모든 유저를 조회합니다.
      operationId: findAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoResponse'
    post:
      tags:
      - User
      summary: 신규 유저 등록
      description: 신규 유저를 생성합니다.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserSignResponse'
  /api/users/auth/simple-sign-in:
    post:
      tags:
      - User
      summary: 간소 로그인 요청
      description: |-
        간소 로그인, 토큰 발급용 기능

         deviceId만 전달하면 토큰 발급
      operationId: simpleSignIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserSignResponse'
  /api/users/auth/sign-in:
    post:
      tags:
      - User
      summary: 로그인 요청
      description: |-
        로그인 요청 기능

         이메일 비밀번호는 필수

         기기 Id 안 보내면 db에 등록 안 되어서 간소 로그인 불가
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserSignResponse'
  /api/subscription/{userId}/vote:
    post:
      tags:
      - Subscription
      summary: Vote topic 구독 상태 변경
      description: |-
        해당 id를 가지는 유저의 Notice 구독 정보를 변경한다.

        인자는 true가 구독을 하는 것으로 한다
      operationId: updateVoteSubscriptionStatus
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
        required: true
      responses:
        "200":
          description: 구독 상태 변경 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        "404":
          description: |-
            존재 하지 않는 userId,

            vote 항목이 null
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseExceptionResponse'
  /api/subscription/{userId}/schedule:
    post:
      tags:
      - Subscription
      summary: Notice topic 구독 상태 변경
      description: |-
        해당 id를 가지는 유저의 Schedule 구독 정보를 변경한다.

        인자는 true가 구독을 하는 것으로 한다
      operationId: updateScheduleSubscriptionStatus
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
        required: true
      responses:
        "200":
          description: 구독 상태 변경 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        "404":
          description: |-
            존재 하지 않는 userId,

            schedule 항목이 null
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseExceptionResponse'
  /api/subscription/{userId}/notice:
    post:
      tags:
      - Subscription
      summary: Notice topic 구독 상태 변경
      description: |-
        해당 id를 가지는 유저의 Notice 구독 정보를 변경한다.

        인자는 true가 구독을 하는 것으로 한다
      operationId: updateNoticeSubscriptionStatus
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
        required: true
      responses:
        "200":
          description: 구독 상태 변경 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        "404":
          description: |-
            존재 하지 않는 userId,

            notice 항목이 null
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseExceptionResponse'
  /api/subscription/{userId}/fcm-token:
    post:
      tags:
      - Subscription
      summary: FCM Token 변경
      description: 해당 id를 가지는 유저의 FCM Token을 새로 변경한다.
      operationId: updateFcmToken
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
        required: true
      responses:
        "200":
          description: token 변경 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        "404":
          description: 존재 하지 않는 userId
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseExceptionResponse'
  /api/subscription/{userId}/badge:
    post:
      tags:
      - Subscription
      summary: Vote topic 구독 상태 변경
      description: 해당 id를 가지는 유저의 badge count를 0으로 변경한다
      operationId: resetBadgeCount
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: badge 0으로 초기화
        "404":
          description: 존재 하지 않는 userId
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseExceptionResponse'
  /api/schedules:
    get:
      tags:
      - Schedule
      summary: 일정 전체 조회
      description: 모든 일정을 조회합니다.
      operationId: findAllSchedules
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleResponse'
    post:
      tags:
      - Schedule
      summary: 신규 일정 등록
      description: |-
        신규 일정을 생성합니다.

        항상 시작일이 종료일보다 빨라야합니다. allDay 설정시 시작시간은 0시0분0초, 종료시간은 23시59분59초로 고정됩니다.

        Type : GROUP(동아리 일정), ACADEMIC(학사 일정), ETC(기타 일정)
      operationId: createSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Schedule'
  /api/fcm:
    post:
      tags:
      - notification-controller
      operationId: sendCustomNotification
      parameters:
      - name: userId
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: topic
        in: query
        required: false
        schema:
          type: string
      - name: token
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        required: true
      responses:
        "200":
          description: OK
  /api/boards:
    get:
      tags:
      - Board
      summary: 모든 글 조회
      description: 모든 글을 조회합니다.
      operationId: getAllBoards
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardResponse'
    post:
      tags:
      - Board
      summary: 글 작성
      description: 새로운 글을 생성합니다.
      operationId: create
      parameters:
      - name: title
        in: query
      - name: content
        in: query
      - name: userId
        in: query
      - name: scheduleId
        in: query
      - name: subjectId
        in: query
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                multipartFileList:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardResponse'
  /api/boards/Comment/{id}:
    post:
      tags:
      - Board
      operationId: saveComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: boardId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: content
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      tags:
      - Board
      operationId: deleteComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /image/{boardId}/{src-url}:
    get:
      tags:
      - file-provide-controller
      summary: image 제공
      description: image 제공
      operationId: getImage
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: string
      - name: src-url
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/votes/subjects:
    get:
      tags:
      - Vote
      summary: 투표 상태별 조회
      description: 투표를 상태 구분에 따라 조회합니다.
      operationId: findSubjectsByStatus
      parameters:
      - name: status
        in: query
        required: true
        schema:
          type: string
          enum:
          - COMPLETED
          - ONGOING
          - UPCOMING
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectResponse'
  /api/votes/subject/{id}:
    get:
      tags:
      - Vote
      summary: 투표 주제 상세 조회
      description: 해당 id의 투표 주제와 선택지 정보를 조회합니다.
      operationId: findBySubjectId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OptionResponse'
    delete:
      tags:
      - Vote
      summary: 투표 주제 삭제
      description: 해당 path의 id를 가지는 subject를 table에서 제거합니다.
      operationId: deleteSubject
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/users/verify:
    get:
      tags:
      - User
      operationId: verifyUserAccount
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/users/exists:
    get:
      tags:
      - User
      summary: 이메일 중복 검사
      description: 해당 이메일이 db에 존재하는 계정인지 확인합니다.
      operationId: checkEmailDuplication
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /api/subscription/{userId}/topic:
    get:
      tags:
      - Subscription
      summary: Topic 구독 상태 반환
      description: 해당 id를 가지는 유저의 구독중인 Topic 정보를 반환한다
      operationId: getSubscriptionTopic
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: topic 정보 반환 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        "404":
          description: 존재 하지 않는 userId
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseExceptionResponse'
  /api/schedules/{id}:
    get:
      tags:
      - Schedule
      summary: 일정 단건 조회
      description: 특정 일정을 해당 일정 id로 조회합니다.
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ScheduleResponse'
    delete:
      tags:
      - Schedule
      summary: 일정 삭제
      description: 해당 id의 일정을 제거합니다.
      operationId: deleteSchedule
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/schedules/month/{month}:
    get:
      tags:
      - Schedule
      summary: 일정 월간 조회
      description: 특정 월이 포함된 일정을 조회합니다.
      operationId: findByMonth
      parameters:
      - name: month
        in: path
        description: 1 ~ 12 까지 정수로 입력
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleResponse'
  /api/schedules/date/{date}:
    get:
      tags:
      - Schedule
      summary: 일정 일간 조회
      description: 특정 날짜가 포함된 일정을 조회합니다.
      operationId: findByDate
      parameters:
      - name: date
        in: path
        description: yyyy-MM-dd 형식의 날짜 입력
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleResponse'
  /api/files/file/{id}:
    get:
      tags:
      - file-controller
      operationId: getUploadFile
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
  /api/files/board/{id}:
    get:
      tags:
      - file-controller
      operationId: getAllUploadFiles
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UploadFileResponse'
  /api/fcm/{userId}/Notification:
    get:
      tags:
      - notification-controller
      operationId: findRecentNotificationMessage
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageRequest'
  /api/boards/user/{id}:
    get:
      tags:
      - Board
      summary: 작성자 id로 글 조회
      description: 작성자 id로 모든 글을 조회합니다.
      operationId: findByUserId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardResponse'
  /api/boards/title:
    get:
      tags:
      - Board
      summary: 모든 글 제목
      description: 글 목록 조회 시 제목 리스트만 반환합니다.
      operationId: getAllTitles
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TitleDto'
  /api/boards/subject/{id}:
    get:
      tags:
      - Board
      summary: 투표 주제 id로 글 조회
      description: 투표 주제 id로 글을 조회합니다
      operationId: findBySubjectId_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardResponse'
  /api/boards/schedule/{id}:
    get:
      tags:
      - Board
      summary: 일정 id로 글 조회
      description: 일정 id로 글을 조회합니다
      operationId: findByScheduleId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardResponse'
  /api/boards/paged:
    get:
      tags:
      - Board
      summary: 최근 글 page 단위로 조회
      description: |-
        최근 size개의 글을 page 단위로 조회합니다.

        size가 10일 때, page0은 1~10, page1은 11~20.. page i는 (i * 10 + 1) ~ (i * 10 + 10) 번 게시글을 가져옵니다.

        첫번째 페이지는 first가 true, 마지막 페이지는 lsat가 true로 설정됩니다.
      operationId: getBoardPages
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardSliceResponse'
  /api/boards/Comments:
    get:
      tags:
      - Board
      operationId: findByBoardId
      parameters:
      - name: boardId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
  /.well-known/apple-app-site-association:
    get:
      tags:
      - apple-app-site-association
      operationId: appleAppSiteAssociation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
  /api/votes/voter/{id}:
    delete:
      tags:
      - Vote
      summary: 투표 선택 철회
      description: 해당 path의 id를 가지는 voter를 table에서 제거합니다.
      operationId: deleteVoter
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/votes/option/{id}:
    delete:
      tags:
      - Vote
      summary: 투표 선택지 삭제
      description: 해당 path의 id를 가지는 option을 table에서 제거합니다.
      operationId: deleteOption
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/users/user/{id}/email/{email}:
    delete:
      tags:
      - User
      summary: 계정 삭제
      description: |-
        해당하는 id와 email이 일치하는 계정 정보를 delete 상태로 변경후, 모든 데이터를 null로 변경합니다.

         pk와 레코드는 그대로 남아있습니다.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
components:
  schemas:
    VoterUpdateRequest:
      required:
      - optionId
      - voterId
      type: object
      properties:
        voterId:
          type: integer
          format: int64
        optionId:
          type: integer
          format: int64
    VoterDTO:
      type: object
      properties:
        voterId:
          type: integer
          format: int64
        subjectId:
          type: integer
          format: int64
        optionId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    SejongStudentAuthRequest:
      type: object
      properties:
        sejongPortalId:
          type: string
        sejongPortalPassword:
          type: string
    Subscription:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        fcmToken:
          type: string
        notice:
          type: boolean
        schedule:
          type: boolean
        vote:
          type: boolean
        badge:
          type: integer
          format: int32
    User:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        generation:
          type: integer
          format: int32
        phoneNumber:
          type: string
        githubId:
          type: string
        discordId:
          type: string
        username:
          type: string
        studentId:
          type: integer
          format: int32
        major:
          type: string
        grade:
          type: integer
          format: int32
        enrolled:
          type: boolean
        authLevel:
          type: string
          enum:
          - DELETE_ACCOUNT
          - NEW_ACCOUNT
          - MAIL_VERIFIED
          - STUDENT_VERIFIED
          - MEMBER_VERIFIED
          - ADMIN
          - SUPER_ADMIN
        deviceId:
          type: string
          format: uuid
        subscription:
          $ref: '#/components/schemas/Subscription'
    UserInfoUpdateRequest:
      type: object
      properties:
        generation:
          type: integer
          format: int32
        phoneNumber:
          type: string
        githubId:
          type: string
        discordId:
          type: string
        fcmToken:
          type: string
        deviceId:
          type: string
          format: uuid
    UserNewPasswordRequest:
      type: object
      properties:
        newPassword:
          type: string
    BoardRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        userId:
          type: integer
          format: int64
        scheduleId:
          type: integer
          format: int64
        subjectId:
          type: integer
          format: int64
    BoardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        userId:
          type: integer
          format: int64
        scheduleId:
          type: integer
          format: int64
        subjectId:
          type: integer
          format: int64
        createDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        fileNames:
          type: array
          items:
            type: string
    OptionRequest:
      type: object
      properties:
        option:
          type: string
    SubjectRequest:
      type: object
      properties:
        subject:
          type: string
        startDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
        options:
          type: array
          items:
            $ref: '#/components/schemas/OptionRequest'
    CreateResponse:
      type: object
      properties:
        subject:
          $ref: '#/components/schemas/VoteSubject'
        options:
          type: array
          items:
            $ref: '#/components/schemas/OptionDTO'
    OptionDTO:
      type: object
      properties:
        optionId:
          type: integer
          format: int64
        option:
          type: string
        count:
          type: integer
          format: int32
    VoteOption:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        option:
          type: string
        count:
          type: integer
          format: int32
        voteSubject:
          $ref: '#/components/schemas/VoteSubject'
        voteVoters:
          type: array
          items:
            $ref: '#/components/schemas/VoteVoter'
    VoteSubject:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        subject:
          type: string
        startDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
        total:
          type: integer
          format: int32
        voteOptions:
          type: array
          items:
            $ref: '#/components/schemas/VoteOption'
        voteVoters:
          type: array
          items:
            $ref: '#/components/schemas/VoteVoter'
    VoteVoter:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        voteSubject:
          $ref: '#/components/schemas/VoteSubject'
        voteOption:
          $ref: '#/components/schemas/VoteOption'
        user:
          $ref: '#/components/schemas/User'
    UserSignRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        deviceId:
          type: string
          format: uuid
    UserSignResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        generation:
          type: integer
          format: int32
        phoneNumber:
          type: string
        githubId:
          type: string
        discordId:
          type: string
        username:
          type: string
        studentId:
          type: integer
          format: int32
        major:
          type: string
        grade:
          type: integer
          format: int32
        enrolled:
          type: boolean
        authLevel:
          type: string
          enum:
          - DELETE_ACCOUNT
          - NEW_ACCOUNT
          - MAIL_VERIFIED
          - STUDENT_VERIFIED
          - MEMBER_VERIFIED
          - ADMIN
          - SUPER_ADMIN
        deviceId:
          type: string
          format: uuid
    BaseExceptionResponse:
      type: object
      properties:
        exception:
          type: string
    SubscriptionRequest:
      type: object
      properties:
        fcmToken:
          type: string
        notice:
          type: boolean
        schedule:
          type: boolean
        vote:
          type: boolean
    SubscriptionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fcmToken:
          type: string
        notice:
          type: boolean
        schedule:
          type: boolean
        vote:
          type: boolean
        badge:
          type: integer
          format: int32
    ScheduleRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        allDay:
          type: boolean
        type:
          type: string
          enum:
          - GROUP
          - ACADEMIC
          - ETC
    Schedule:
      required:
      - title
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        allDay:
          type: boolean
        type:
          type: string
          enum:
          - GROUP
          - ACADEMIC
          - ETC
        boardId:
          type: integer
          format: int64
    MessageRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        body:
          type: string
        topic:
          type: string
        contentType:
          type: string
        contentId:
          type: integer
          format: int64
        sendDateTime:
          type: string
          format: date-time
    Board:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        writer:
          $ref: '#/components/schemas/User'
        uploadFiles:
          type: array
          items:
            $ref: '#/components/schemas/UploadFile'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        scheduleId:
          type: integer
          format: int64
        subjectId:
          type: integer
          format: int64
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        writer:
          $ref: '#/components/schemas/User'
        board:
          $ref: '#/components/schemas/Board'
    UploadFile:
      type: object
      properties:
        id:
          type: integer
          format: int64
        board:
          $ref: '#/components/schemas/Board'
        originalName:
          type: string
        saveName:
          type: string
        size:
          type: integer
          format: int64
        savePath:
          type: string
    SubjectResponse:
      type: object
      properties:
        subjectId:
          type: integer
          format: int64
        subject:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        total:
          type: integer
          format: int32
    OptionResponse:
      type: object
      properties:
        subject:
          type: string
        startDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
        options:
          type: array
          items:
            $ref: '#/components/schemas/OptionDTO'
    UserInfoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        generation:
          type: integer
          format: int32
        phoneNumber:
          type: string
        githubId:
          type: string
        discordId:
          type: string
        fcmToken:
          type: string
        username:
          type: string
        studentId:
          type: integer
          format: int32
        major:
          type: string
        grade:
          type: integer
          format: int32
        enrolled:
          type: boolean
        authLevel:
          type: string
          enum:
          - DELETE_ACCOUNT
          - NEW_ACCOUNT
          - MAIL_VERIFIED
          - STUDENT_VERIFIED
          - MEMBER_VERIFIED
          - ADMIN
          - SUPER_ADMIN
    BaseResponse:
      type: object
      properties:
        response:
          type: string
    ScheduleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        allDay:
          type: boolean
        type:
          type: string
          enum:
          - GROUP
          - ACADEMIC
          - ETC
        boardId:
          type: integer
          format: int64
    UploadFileResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        boardId:
          type: integer
          format: int64
        originalName:
          type: string
        saveName:
          type: string
        size:
          type: integer
          format: int64
        savePath:
          type: string
    TitleDto:
      type: object
      properties:
        title:
          type: string
    BoardSliceResponse:
      type: object
      properties:
        boardResponses:
          type: array
          items:
            $ref: '#/components/schemas/BoardResponse'
        first:
          type: boolean
        last:
          type: boolean
  securitySchemes:
    JWT:
      type: apiKey
      name: Authorization
      in: header
